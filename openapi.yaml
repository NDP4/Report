openapi: 3.1.0
info:
  title: Telkomsel Monitoring Dashboard API
  description: |
    API for Telkomsel Monitoring Dashboard system built with Laravel 11 and MySQL.
    This API provides authentication and data management capabilities for monitoring
    service tickets, agent activities, and system reports.

    ## Authentication
    This API uses JWT (JSON Web Token) for authentication. Include the token in the
    Authorization header as `Bearer {token}`.

    ## Default Test Users
    - **Admin**: username=`admin`, password=`password`
    - **User**: username=`user`, password=`password`
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@telkomsel.co.id
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.telkomsel-monitoring.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and token management

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user credentials and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: User's username
                  example: admin
                password:
                  type: string
                  format: password
                  description: User's password
                  minLength: 6
                  example: password
            examples:
              admin:
                summary: Admin Login
                value:
                  username: admin
                  password: password
              user:
                summary: Regular User Login
                value:
                  username: user
                  password: password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: JWT access token
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      token_type:
                        type: string
                        example: bearer
                      expires_in:
                        type: integer
                        description: Token expiration time in seconds
                        example: 3600
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                success: false
                message: Invalid credentials

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get User Info
      description: Get authenticated user information
      operationId: getUserInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      description: Refresh JWT token before expiration
      operationId: refreshToken
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: New JWT access token
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      token_type:
                        type: string
                        example: bearer
                      expires_in:
                        type: integer
                        description: Token expiration time in seconds
                        example: 3600
        "401":
          description: Token could not be refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                success: false
                message: Token could not be refreshed

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate current JWT token
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully logged out
        "500":
          description: Failed to logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                success: false
                message: Failed to logout

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: admin
        role:
          type: string
          enum: [admin, user]
          description: User role
          example: admin
      required:
        - id
        - username
        - role

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: An error occurred
      required:
        - success
        - message

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: object
          description: Validation error details
          additionalProperties:
            type: array
            items:
              type: string
          example:
            username: ["The username field is required."]
            password: ["The password field is required."]
      required:
        - success
        - message
        - errors

    ServiceTicket:
      type: object
      description: Service ticket information
      properties:
        ticket_id:
          type: integer
          format: int64
          description: Ticket ID
          example: 1
        user_id:
          type: integer
          format: int64
          description: User who created the ticket
          example: 1
        subject:
          type: string
          description: Ticket subject
          example: System login issue
        description:
          type: string
          description: Detailed ticket description
          example: Unable to login to the monitoring dashboard
        category_id:
          type: integer
          format: int64
          description: Ticket category ID
          example: 1
        subcategory_id:
          type: integer
          format: int64
          description: Ticket subcategory ID
          example: 1
        status_id:
          type: integer
          format: int64
          description: Ticket status ID
          example: 1
        source_id:
          type: integer
          format: int64
          description: Ticket source ID
          example: 1
        assigned_to:
          type: integer
          format: int64
          description: Assigned agent user ID
          example: 2
        priority_id:
          type: integer
          format: int64
          description: Priority level ID
          example: 1
        date_open:
          type: string
          format: date-time
          description: Ticket open date
          example: "2024-12-26T10:00:00Z"
        date_close:
          type: string
          format: date-time
          description: Ticket close date
          example: "2024-12-26T12:30:00Z"
        sla_minutes:
          type: integer
          description: SLA in minutes
          example: 240
        time_to_resolve:
          type: integer
          description: Actual resolution time in minutes
          example: 150
        sla_met:
          type: boolean
          description: Whether SLA was met
          example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-12-26T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-12-26T12:30:00Z"
      required:
        - ticket_id
        - user_id
        - subject
        - description

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            success: false
            message: Unauthenticated.

security:
  - bearerAuth: []
